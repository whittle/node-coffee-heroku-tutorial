<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Node && CoffeeScript && Heroku]]></title>
  <link href="http://whittle.github.com/node-coffee-heroku-tutorial/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://whittle.github.com/node-coffee-heroku-tutorial/"/>
  <updated>2011-11-21T19:12:55-05:00</updated>
  <id>http://whittle.github.com/node-coffee-heroku-tutorial/</id>
  <author>
    <name><![CDATA[Jason Whittle]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Simpler is better: switching to CoffeeScript]]></title>
    <link href="http://whittle.github.com/node-coffee-heroku-tutorial/blog/2011/10/20/simpler-is-better-switching-to-coffeescript/"/>
    <updated>2011-10-20T23:41:00-04:00</updated>
    <id>http://whittle.github.com/node-coffee-heroku-tutorial/blog/2011/10/20/simpler-is-better-switching-to-coffeescript</id>
    <content type="html"><![CDATA[<p>At the end of the last post, we refactored the request handler method
just a little bit to make it shorter. In this post, we’re going to
tighten things up just a little bit more by compiling
<a href="http://jashkenas.github.com/coffee-script/">CoffeeScript</a> into
JavaScript.</p>

<p>First off, we’ll rename our one existing source file from <code>app.js</code> to
<code>app.coffee</code>. Then we go in and comment out everything:</p>

<p><div><script src='http://gist-it.appspot.com/github/whittle/node-coffee-heroku-tutorial/raw/723e950848902764391da05a8e5446f132a058af/app.coffee'></script>
<noscript><pre><code># (function() {
#   var http = require('http');
#
#   var sayHello = function(request, response) {
#     var message = 'Hello, world!';
#
#     response.writeHead(200, {
#       'Content-Type': 'text/plain; charset=utf-8',
#       'Content-Length': Buffer.byteLength(message, 'utf8')});
#     response.end(message, 'utf8');
#   };
#
#   var app = http.createServer(sayHello);
#   app.listen(3080);
# })();
</code></pre></noscript></div>
</p>

<p>You can see that instead of JavaScript’s C++ and C-style comments
(<code>//</code> to the end of the line, and <code>/*</code> through <code>*/</code>, respectively),
CoffeeScript uses shell-style comments: <code>#</code> to the end of the line.</p>

<p>The next thing you might notice is that trying to run <code>app.coffee</code>
through <code>node</code> causes a syntax error on the first line. Node doesn’t
support CoffeeScript out of the box.</p>

<p>The easiest way to install <code>coffee</code>, the CoffeeScript compiler, is
through <a href="http://npmjs.org/">NPM</a>. If you don’t have NPM yet, the
installation one-liner is <code>curl http://npmjs.org/install.sh |
sh</code>. After that, installing CoffeeScript is as easy as
<code>npm install -g coffee-script</code>. (The <code>-g</code> is for global. If you leave
it out, the <code>coffee</code> command line will only be available in the
directory that you were visiting when you installed it.)</p>

<p>Now that you have CoffeeScript installed, you can compile <code>app.coffee</code>
using <code>coffee -c app.coffee</code> at the command line. Go ahead and try it;
I’ll wait. Once you’ve done that, you’ll get <code>app.js</code> back in that
same directory! What’s more, it’ll closely resemble the <code>app.js</code> that
we started on back in that first post:</p>

<p><div><script src='http://gist-it.appspot.com/github/whittle/node-coffee-heroku-tutorial/raw/e570711b3197b346f924631a3476ae70d6d9af73/app.js'></script>
<noscript><pre><code>(function() {

}).call(this);
</code></pre></noscript></div>
</p>

<p>The first fact we can glean from this output is that the <code>coffee</code>
compiler creates an enclosing scope for our app; this in turn means
that we don’t have to:</p>

<p><div><script src='http://gist-it.appspot.com/github/whittle/node-coffee-heroku-tutorial/raw/5a227cef16214828fe145ff7d752f855647f95a2/app.coffee'></script>
<noscript><pre><code># var http = require('http');
#
# var sayHello = function(request, response) {
#   var message = 'Hello, world!';
#
#   response.writeHead(200, {
#     'Content-Type': 'text/plain; charset=utf-8',
#     'Content-Length': Buffer.byteLength(message, 'utf8')});
#   response.end(message, 'utf8');
# };
#
# var app = http.createServer(sayHello);
# app.listen(3080);
</code></pre></noscript></div>
</p>

<p>After removing the enclosing scope from our app, the next thing we’ll
do is start add pieces back in, starting with requiring the <code>http</code>
module:</p>

<p><div><script src='http://gist-it.appspot.com/github/whittle/node-coffee-heroku-tutorial/raw/b38ce185cd21127a5f95c0feace2f5bc65517e89/app.coffee'></script>
<noscript><pre><code>http = require 'http'

# var sayHello = function(request, response) {
#   var message = 'Hello, world!';
#
#   response.writeHead(200, {
#     'Content-Type': 'text/plain; charset=utf-8',
#     'Content-Length': Buffer.byteLength(message, 'utf8')});
#   response.end(message, 'utf8');
# };
#
# var app = http.createServer(sayHello);
# app.listen(3080);
</code></pre></noscript></div>
</p>

<p>Two changes here between JavaScript and CoffeeScript:</p>

<ol>
<li><p>In JavaScript, it is critical that variables get marked with the
<code>var</code> keyword when they’re initially declared; otherwise they are
automatically global in scope. In CoffeeScript, the <code>var</code> keyword
is <em>never</em> used (it causes a syntax error) and the compiler
<em>always</em> inserts it into the compiled JavaScript for you.</p></li>
<li><p>In JavaScript, parentheses are necessary for every function
call. In CoffeeScript, they’re optional.</p></li>
</ol>


<p>At this point, you can run <code>coffee -c app.coffee</code> again to see the
compiled code in <code>app.js</code>. Alternatively, if you’re getting tired of
running the compiler every time, you can set a separate process to do
it for you: <code>coffee -wc app.coffee &amp;</code> will fork a new process to do
that compiling for you whenever <code>app.coffee</code> changes on the disk.</p>

<p>Regardless of how you compile it, once you have the new version of
<code>app.js</code>, you can see how the CoffeeScript compiler adds the <code>var</code>
declaration and parentheses back in:</p>

<p><div><script src='http://gist-it.appspot.com/github/whittle/node-coffee-heroku-tutorial/raw/b38ce185cd21127a5f95c0feace2f5bc65517e89/app.js'></script>
<noscript><pre><code>(function() {
  var http;
  http = require('http');
}).call(this);
</code></pre></noscript></div>
</p>

<p>Continuing to go line by line, we’ll add the <code>sayHello()</code> function
declaration back in:</p>

<p><div><script src='http://gist-it.appspot.com/github/whittle/node-coffee-heroku-tutorial/raw/e4ccba356c92ffcfb5b329497859109362f910a7/app.coffee'></script>
<noscript><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset='utf-8'&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;chrome=1&quot;&gt;
        &lt;title&gt;404 - GitHub&lt;/title&gt;
    &lt;link rel=&quot;search&quot; type=&quot;application/opensearchdescription+xml&quot; href=&quot;/opensearch.xml&quot; title=&quot;GitHub&quot; /&gt;
    &lt;link rel=&quot;fluid-icon&quot; href=&quot;https://github.com/fluidicon.png&quot; title=&quot;GitHub&quot; /&gt;

    
    

    &lt;meta content=&quot;authenticity_token&quot; name=&quot;csrf-param&quot; /&gt;
&lt;meta name=&quot;csrf-token&quot; /&gt;

    &lt;link href=&quot;https://a248.e.akamai.net/assets.github.com/stylesheets/bundle_github.css?7483b3026cf7423c8c9ed46dc4bc3207c4ef2de9&quot; media=&quot;screen&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;
    

    &lt;script src=&quot;https://a248.e.akamai.net/assets.github.com/javascripts/bundle_jquery.js?13d73fa773936eacdb66a272661390d94b2bff44&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://a248.e.akamai.net/assets.github.com/javascripts/bundle_github.js?501894cd2165810e46c2f365ba58c94aa48b45d1&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
    

    
  &lt;/head&gt;


  &lt;body class=&quot;logged_out   env-production &quot;&gt;
    


    

    &lt;div id=&quot;main&quot;&gt;
      &lt;div id=&quot;header&quot; class=&quot;true&quot;&gt;
          &lt;a class=&quot;logo&quot; href=&quot;https://github.com&quot;&gt;
            &lt;img alt=&quot;github&quot; class=&quot;default svg&quot; height=&quot;45&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/header/logov6.svg&quot; /&gt;
            &lt;img alt=&quot;github&quot; class=&quot;default png&quot; height=&quot;45&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/header/logov6.png&quot; /&gt;
            &lt;!--[if (gt IE 8)|!(IE)]&gt;&lt;!--&gt;
            &lt;img alt=&quot;github&quot; class=&quot;hover svg&quot; height=&quot;45&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/header/logov6-hover.svg&quot; /&gt;
            &lt;img alt=&quot;github&quot; class=&quot;hover png&quot; height=&quot;45&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/header/logov6-hover.png&quot; /&gt;
            &lt;!--&lt;![endif]--&gt;
          &lt;/a&gt;

        &lt;div class=&quot;topsearch&quot;&gt;
    &lt;!--
      make sure to use fully qualified URLs here since this nav
      is used on error pages on other domains
    --&gt;
    &lt;ul class=&quot;nav logged_out&quot;&gt;
        &lt;li class=&quot;pricing&quot;&gt;&lt;a href=&quot;https://github.com/plans&quot;&gt;Signup and Pricing&lt;/a&gt;&lt;/li&gt;
        &lt;li class=&quot;explore&quot;&gt;&lt;a href=&quot;https://github.com/explore&quot;&gt;Explore GitHub&lt;/a&gt;&lt;/li&gt;
      &lt;li class=&quot;features&quot;&gt;&lt;a href=&quot;https://github.com/features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt;
        &lt;li class=&quot;blog&quot;&gt;&lt;a href=&quot;https://github.com/blog&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt;
      &lt;li class=&quot;login&quot;&gt;&lt;a href=&quot;https://github.com/login?return_to=%2Fwhittle%2Fnode-coffee-heroku-tutorial%2Fe4ccba356c92ffcfb5b329497859109362f910a7%2Fapp.coffee&quot;&gt;Login&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;

      &lt;/div&gt;

      
        &lt;div class=&quot;site&quot;&gt;
          

&lt;style type=&quot;text/css&quot;&gt;
    * {
        margin: 0px;
        padding: 0px;
    }
    #parallax_illustration {
        display:block;
        width: 940px;
        height: 375px;
        margin: 20px 0 0 20px;
        position: relative;
        overflow: hidden;
    }
    #parallax_illustration #parallax_error_text {
        position: absolute;
        top: 72px;
        left: 72px;
        z-index: 10;
    }
    #parallax_illustration #parallax_octocat {
        position: absolute;
        top: 94px;
        left: 356px;
        z-index: 9;
    }
    #parallax_illustration #parallax_speeder {
        position: absolute;
        top: 150px;
        left: 432px;
        z-index: 8;
    }
    #parallax_illustration #parallax_octocatshadow {
        position: absolute;
        top: 297px;
        left: 371px;
        z-index: 7;
    }
    #parallax_illustration #parallax_speedershadow {
        position: absolute;
        top: 263px;
        left: 442px;
        z-index: 6;
    }
    #parallax_illustration #parallax_building_1 {
        position: absolute;
        top: 73px;
        left: 467px;
        z-index: 5;
    }
    #parallax_illustration #parallax_building_2 {
        position: absolute;
        top: 113px;
        left: 762px;
        z-index: 4;
    }
    #parallax_illustration #parallax_bg {
        position: absolute;
        top: -20px;
        left: -20px;
        z-index: 1;
    }
&lt;/style&gt;



&lt;div id=&quot;parallax_illustration&quot;&gt;
  &lt;img alt=&quot;404 | &amp;ldquo;This is not the web page you are looking for&amp;rdquo;&quot; class=&quot;js-plaxify&quot; data-xrange=&quot;20&quot; data-yrange=&quot;10&quot; height=&quot;249&quot; id=&quot;parallax_error_text&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_errortext.png&quot; width=&quot;271&quot; /&gt;
  &lt;img alt=&quot;Octobi Wan Catnobi&quot; class=&quot;js-plaxify&quot; data-xrange=&quot;10&quot; data-yrange=&quot;10&quot; height=&quot;230&quot; id=&quot;parallax_octocat&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_octocat.png&quot; width=&quot;188&quot; /&gt;
  &lt;img alt=&quot;land speeder&quot; class=&quot;js-plaxify&quot; data-xrange=&quot;10&quot; data-yrange=&quot;10&quot; height=&quot;156&quot; id=&quot;parallax_speeder&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_speeder.png&quot; width=&quot;440&quot; /&gt;
  &lt;img alt=&quot;Octobi Wan Catnobi's shadow&quot; class=&quot;js-plaxify&quot; data-xrange=&quot;10&quot; data-yrange=&quot;10&quot; height=&quot;49&quot; id=&quot;parallax_octocatshadow&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_octocatshadow.png&quot; width=&quot;166&quot; /&gt;
  &lt;img alt=&quot;land speeder's shadow&quot; class=&quot;js-plaxify&quot; data-xrange=&quot;10&quot; data-yrange=&quot;10&quot; height=&quot;75&quot; id=&quot;parallax_speedershadow&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_speedershadow.png&quot; width=&quot;430&quot; /&gt;
  &lt;img alt=&quot;building&quot; class=&quot;js-plaxify&quot; data-invert=&quot;true&quot; data-xrange=&quot;50&quot; data-yrange=&quot;20&quot; height=&quot;123&quot; id=&quot;parallax_building_1&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_building_1.png&quot; width=&quot;304&quot; /&gt;
  &lt;img alt=&quot;building&quot; class=&quot;js-plaxify&quot; data-invert=&quot;true&quot; data-xrange=&quot;75&quot; data-yrange=&quot;30&quot; height=&quot;50&quot; id=&quot;parallax_building_2&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_building_2.png&quot; width=&quot;116&quot; /&gt;
  &lt;img alt=&quot;building&quot; class=&quot;js-plaxify&quot; data-invert=&quot;true&quot; data-xrange=&quot;0&quot; data-yrange=&quot;40&quot; height=&quot;415&quot; id=&quot;parallax_bg&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_bg.jpg&quot; width=&quot;940&quot; /&gt;
&lt;/div&gt;

&lt;/script&gt;

        &lt;/div&gt;
    &lt;/div&gt;

    &lt;!-- footer --&gt;
    &lt;div id=&quot;footer&quot; &gt;
      
  &lt;div class=&quot;upper_footer&quot;&gt;
     &lt;div class=&quot;site&quot; class=&quot;clearfix&quot;&gt;

       &lt;!--[if IE]&gt;&lt;h4 id=&quot;blacktocat_ie&quot;&gt;GitHub Links&lt;/h4&gt;&lt;![endif]--&gt;
       &lt;![if !IE]&gt;&lt;h4 id=&quot;blacktocat&quot;&gt;GitHub Links&lt;/h4&gt;&lt;![endif]&gt;

       &lt;ul class=&quot;footer_nav&quot;&gt;
         &lt;h4&gt;GitHub&lt;/h4&gt;
         &lt;li&gt;&lt;a href=&quot;https://github.com/about&quot;&gt;About&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;https://github.com/blog&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;https://github.com/features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;https://github.com/contact&quot;&gt;Contact &amp;amp; Support&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;https://github.com/training&quot;&gt;Training&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://status.github.com/&quot;&gt;Site Status&lt;/a&gt;&lt;/li&gt;
       &lt;/ul&gt;

       &lt;ul class=&quot;footer_nav&quot;&gt;
         &lt;h4&gt;Tools&lt;/h4&gt;
         &lt;li&gt;&lt;a href=&quot;http://mac.github.com/&quot;&gt;GitHub for Mac&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://mobile.github.com/&quot;&gt;Issues for iPhone&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;https://gist.github.com&quot;&gt;Gist: Code Snippets&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://enterprise.github.com/&quot;&gt;GitHub Enterprise&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://jobs.github.com/&quot;&gt;Job Board&lt;/a&gt;&lt;/li&gt;
       &lt;/ul&gt;

       &lt;ul class=&quot;footer_nav&quot;&gt;
         &lt;h4&gt;Extras&lt;/h4&gt;
         &lt;li&gt;&lt;a href=&quot;http://shop.github.com/&quot;&gt;GitHub Shop&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://octodex.github.com/&quot;&gt;The Octodex&lt;/a&gt;&lt;/li&gt;
       &lt;/ul&gt;

       &lt;ul class=&quot;footer_nav&quot;&gt;
         &lt;h4&gt;Documentation&lt;/h4&gt;
         &lt;li&gt;&lt;a href=&quot;http://help.github.com/&quot;&gt;GitHub Help&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://developer.github.com/&quot;&gt;Developer API&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://github.github.com/github-flavored-markdown/&quot;&gt;GitHub Flavored Markdown&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;&lt;/li&gt;
       &lt;/ul&gt;

     &lt;/div&gt;&lt;!-- /.site --&gt;
  &lt;/div&gt;&lt;!-- /.upper_footer --&gt;

&lt;div class=&quot;lower_footer&quot;&gt;
  &lt;div class=&quot;site&quot; class=&quot;clearfix&quot;&gt;
    &lt;!--[if IE]&gt;&lt;div id=&quot;legal_ie&quot;&gt;&lt;![endif]--&gt;
    &lt;![if !IE]&gt;&lt;div id=&quot;legal&quot;&gt;&lt;![endif]&gt;
      &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/site/terms&quot;&gt;Terms of Service&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/site/privacy&quot;&gt;Privacy&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/security&quot;&gt;Security&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;

      &lt;p&gt;&amp;copy; 2011 &lt;span id=&quot;_rrt&quot; title=&quot;0.03429s from fe8.rs.github.com&quot;&gt;GitHub&lt;/span&gt; Inc. All rights reserved.&lt;/p&gt;
    &lt;/div&gt;&lt;!-- /#legal or /#legal_ie--&gt;

      &lt;div class=&quot;sponsor&quot;&gt;
        &lt;a href=&quot;http://www.rackspace.com&quot; class=&quot;logo&quot;&gt;
          &lt;img alt=&quot;Dedicated Server&quot; height=&quot;36&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/footer/rackspace_logo.png?v2&quot; width=&quot;38&quot; /&gt;
        &lt;/a&gt;
        Powered by the &lt;a href=&quot;http://www.rackspace.com &quot;&gt;Dedicated
        Servers&lt;/a&gt; and&lt;br/&gt; &lt;a href=&quot;http://www.rackspacecloud.com&quot;&gt;Cloud
        Computing&lt;/a&gt; of Rackspace Hosting&lt;span&gt;&amp;reg;&lt;/span&gt;
      &lt;/div&gt;
  &lt;/div&gt;&lt;!-- /.site --&gt;
&lt;/div&gt;&lt;!-- /.lower_footer --&gt;

    &lt;/div&gt;&lt;!-- /#footer --&gt;

    

&lt;div id=&quot;keyboard_shortcuts_pane&quot; class=&quot;instapaper_ignore readability-extra&quot; style=&quot;display:none&quot;&gt;
  &lt;h2&gt;Keyboard Shortcuts &lt;small&gt;&lt;a href=&quot;#&quot; class=&quot;js-see-all-keyboard-shortcuts&quot;&gt;(see all)&lt;/a&gt;&lt;/small&gt;&lt;/h2&gt;

  &lt;div class=&quot;columns threecols&quot;&gt;
    &lt;div class=&quot;column first&quot;&gt;
      &lt;h3&gt;Site wide shortcuts&lt;/h3&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;s&lt;/dt&gt;
        &lt;dd&gt;Focus site search&lt;/dd&gt;
      &lt;/dl&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;?&lt;/dt&gt;
        &lt;dd&gt;Bring up this help dialog&lt;/dd&gt;
      &lt;/dl&gt;
    &lt;/div&gt;&lt;!-- /.column.first --&gt;

    &lt;div class=&quot;column middle&quot; style=&amp;#39;display:none&amp;#39;&gt;
      &lt;h3&gt;Commit list&lt;/h3&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;j&lt;/dt&gt;
        &lt;dd&gt;Move selection down&lt;/dd&gt;
      &lt;/dl&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;k&lt;/dt&gt;
        &lt;dd&gt;Move selection up&lt;/dd&gt;
      &lt;/dl&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;c &lt;em&gt;or&lt;/em&gt; o &lt;em&gt;or&lt;/em&gt; enter&lt;/dt&gt;
        &lt;dd&gt;Open commit&lt;/dd&gt;
      &lt;/dl&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;y&lt;/dt&gt;
        &lt;dd&gt;Expand URL to its canonical form&lt;/dd&gt;
      &lt;/dl&gt;
    &lt;/div&gt;&lt;!-- /.column.first --&gt;

    &lt;div class=&quot;column last&quot; style=&amp;#39;display:none&amp;#39;&gt;
      &lt;h3&gt;Pull request list&lt;/h3&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;j&lt;/dt&gt;
        &lt;dd&gt;Move selection down&lt;/dd&gt;
      &lt;/dl&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;k&lt;/dt&gt;
        &lt;dd&gt;Move selection up&lt;/dd&gt;
      &lt;/dl&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;o &lt;em&gt;or&lt;/em&gt; enter&lt;/dt&gt;
        &lt;dd&gt;Open issue&lt;/dd&gt;
      &lt;/dl&gt;
    &lt;/div&gt;&lt;!-- /.columns.last --&gt;

  &lt;/div&gt;&lt;!-- /.columns.equacols --&gt;

  &lt;div style=&amp;#39;display:none&amp;#39;&gt;
    &lt;div class=&quot;rule&quot;&gt;&lt;/div&gt;

    &lt;h3&gt;Issues&lt;/h3&gt;

    &lt;div class=&quot;columns threecols&quot;&gt;
      &lt;div class=&quot;column first&quot;&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;j&lt;/dt&gt;
          &lt;dd&gt;Move selection down&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;k&lt;/dt&gt;
          &lt;dd&gt;Move selection up&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;x&lt;/dt&gt;
          &lt;dd&gt;Toggle selection&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;o &lt;em&gt;or&lt;/em&gt; enter&lt;/dt&gt;
          &lt;dd&gt;Open issue&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;&lt;!-- /.column.first --&gt;
      &lt;div class=&quot;column middle&quot;&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;I&lt;/dt&gt;
          &lt;dd&gt;Mark selection as read&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;U&lt;/dt&gt;
          &lt;dd&gt;Mark selection as unread&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;e&lt;/dt&gt;
          &lt;dd&gt;Close selection&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;y&lt;/dt&gt;
          &lt;dd&gt;Remove selection from view&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;&lt;!-- /.column.middle --&gt;
      &lt;div class=&quot;column last&quot;&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;c&lt;/dt&gt;
          &lt;dd&gt;Create issue&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;l&lt;/dt&gt;
          &lt;dd&gt;Create label&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;i&lt;/dt&gt;
          &lt;dd&gt;Back to inbox&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;u&lt;/dt&gt;
          &lt;dd&gt;Back to issues&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;/&lt;/dt&gt;
          &lt;dd&gt;Focus issues search&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div style=&amp;#39;display:none&amp;#39;&gt;
    &lt;div class=&quot;rule&quot;&gt;&lt;/div&gt;

    &lt;h3&gt;Issues Dashboard&lt;/h3&gt;

    &lt;div class=&quot;columns threecols&quot;&gt;
      &lt;div class=&quot;column first&quot;&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;j&lt;/dt&gt;
          &lt;dd&gt;Move selection down&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;k&lt;/dt&gt;
          &lt;dd&gt;Move selection up&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;o &lt;em&gt;or&lt;/em&gt; enter&lt;/dt&gt;
          &lt;dd&gt;Open issue&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;&lt;!-- /.column.first --&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div style=&amp;#39;display:none&amp;#39;&gt;
    &lt;div class=&quot;rule&quot;&gt;&lt;/div&gt;

    &lt;h3&gt;Network Graph&lt;/h3&gt;
    &lt;div class=&quot;columns equacols&quot;&gt;
      &lt;div class=&quot;column first&quot;&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;&lt;span class=&quot;badmono&quot;&gt;←&lt;/span&gt; &lt;em&gt;or&lt;/em&gt; h&lt;/dt&gt;
          &lt;dd&gt;Scroll left&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;&lt;span class=&quot;badmono&quot;&gt;→&lt;/span&gt; &lt;em&gt;or&lt;/em&gt; l&lt;/dt&gt;
          &lt;dd&gt;Scroll right&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;&lt;span class=&quot;badmono&quot;&gt;↑&lt;/span&gt; &lt;em&gt;or&lt;/em&gt; k&lt;/dt&gt;
          &lt;dd&gt;Scroll up&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;&lt;span class=&quot;badmono&quot;&gt;↓&lt;/span&gt; &lt;em&gt;or&lt;/em&gt; j&lt;/dt&gt;
          &lt;dd&gt;Scroll down&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;t&lt;/dt&gt;
          &lt;dd&gt;Toggle visibility of head labels&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;&lt;!-- /.column.first --&gt;
      &lt;div class=&quot;column last&quot;&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;shift &lt;span class=&quot;badmono&quot;&gt;←&lt;/span&gt; &lt;em&gt;or&lt;/em&gt; shift h&lt;/dt&gt;
          &lt;dd&gt;Scroll all the way left&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;shift &lt;span class=&quot;badmono&quot;&gt;→&lt;/span&gt; &lt;em&gt;or&lt;/em&gt; shift l&lt;/dt&gt;
          &lt;dd&gt;Scroll all the way right&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;shift &lt;span class=&quot;badmono&quot;&gt;↑&lt;/span&gt; &lt;em&gt;or&lt;/em&gt; shift k&lt;/dt&gt;
          &lt;dd&gt;Scroll all the way up&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;shift &lt;span class=&quot;badmono&quot;&gt;↓&lt;/span&gt; &lt;em&gt;or&lt;/em&gt; shift j&lt;/dt&gt;
          &lt;dd&gt;Scroll all the way down&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;&lt;!-- /.column.last --&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div &gt;
    &lt;div class=&quot;rule&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;columns threecols&quot;&gt;
      &lt;div class=&quot;column first&quot; &gt;
        &lt;h3&gt;Source Code Browsing&lt;/h3&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;t&lt;/dt&gt;
          &lt;dd&gt;Activates the file finder&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;l&lt;/dt&gt;
          &lt;dd&gt;Jump to line&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;w&lt;/dt&gt;
          &lt;dd&gt;Switch branch/tag&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;y&lt;/dt&gt;
          &lt;dd&gt;Expand URL to its canonical form&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

    &lt;div id=&quot;markdown-help&quot; class=&quot;instapaper_ignore readability-extra&quot;&gt;
  &lt;h2&gt;Markdown Cheat Sheet&lt;/h2&gt;

  &lt;div class=&quot;cheatsheet-content&quot;&gt;

  &lt;div class=&quot;mod&quot;&gt;
    &lt;div class=&quot;col&quot;&gt;
      &lt;h3&gt;Format Text&lt;/h3&gt;
      &lt;p&gt;Headers&lt;/p&gt;
      &lt;pre&gt;
# This is an &amp;lt;h1&amp;gt; tag
## This is an &amp;lt;h2&amp;gt; tag
###### This is an &amp;lt;h6&amp;gt; tag&lt;/pre&gt;
     &lt;p&gt;Text styles&lt;/p&gt;
     &lt;pre&gt;
*This text will be italic*
_This will also be italic_
**This text will be bold**
__This will also be bold__

*You **can** combine them*
&lt;/pre&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;
      &lt;h3&gt;Lists&lt;/h3&gt;
      &lt;p&gt;Unordered&lt;/p&gt;
      &lt;pre&gt;
* Item 1
* Item 2
  * Item 2a
  * Item 2b&lt;/pre&gt;
     &lt;p&gt;Ordered&lt;/p&gt;
     &lt;pre&gt;
1. Item 1
2. Item 2
3. Item 3
   * Item 3a
   * Item 3b&lt;/pre&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;
      &lt;h3&gt;Miscellaneous&lt;/h3&gt;
      &lt;p&gt;Images&lt;/p&gt;
      &lt;pre&gt;
![GitHub Logo](/images/logo.png)
Format: ![Alt Text](url)
&lt;/pre&gt;
     &lt;p&gt;Links&lt;/p&gt;
     &lt;pre&gt;
http://github.com - automatic!
[GitHub](http://github.com)&lt;/pre&gt;
&lt;p&gt;Blockquotes&lt;/p&gt;
     &lt;pre&gt;
As Kanye West said:
&gt; We're living the future so
&gt; the present is our past.
&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;rule&quot;&gt;&lt;/div&gt;

  &lt;h3&gt;Code Examples in Markdown&lt;/h3&gt;
  &lt;div class=&quot;col&quot;&gt;
      &lt;p&gt;Syntax highlighting with &lt;a href=&quot;http://github.github.com/github-flavored-markdown/&quot; title=&quot;GitHub Flavored Markdown&quot; target=&quot;_blank&quot;&gt;GFM&lt;/a&gt;&lt;/p&gt;
      &lt;pre&gt;
```javascript
function fancyAlert(arg) {
  if(arg) {
    $.facebox({div:'#foo'})
  }
}
```&lt;/pre&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;
      &lt;p&gt;Or, indent your code 4 spaces&lt;/p&gt;
      &lt;pre&gt;
Here is a Python code example
without syntax highlighting:

    def foo:
      if not bar:
        return true&lt;/pre&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;
      &lt;p&gt;Inline code for comments&lt;/p&gt;
      &lt;pre&gt;
I think you should use an
`&amp;lt;addr&amp;gt;` element here instead.&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;/div&gt;
&lt;/div&gt;

    &lt;div class=&quot;context-overlay&quot;&gt;&lt;/div&gt;

    
    
    
  &lt;/body&gt;
&lt;/html&gt;
</code></pre></noscript></div>
</p>

<p>Functions in CoffeeScript are not declared with the <code>function</code>
declaration as in JavaScript. Instead, they are declared with the <code>-&gt;</code>
operator. Any function arguments are listed in an optional pair of
parentheses preceding the <code>-&gt;</code> operator. The body of the function,
instead of being enclosed in curly braces as in JavaScript, is
delineated using indentation:</p>

<p><div><script src='http://gist-it.appspot.com/github/whittle/node-coffee-heroku-tutorial/raw/41489bc84177a174ab0eb6f788561547d3ac861c/app.coffee'></script>
<noscript><pre><code>http = require 'http'

sayHello = (request, response) -&gt;
  message = 'Hello, world!'
#
#   response.writeHead(200, {
#     'Content-Type': 'text/plain; charset=utf-8',
#     'Content-Length': Buffer.byteLength(message, 'utf8')});
#   response.end(message, 'utf8');
#
# var app = http.createServer(sayHello);
# app.listen(3080);
</code></pre></noscript></div>
</p>

<p>Which then compiles to:</p>

<p><div><script src='http://gist-it.appspot.com/github/whittle/node-coffee-heroku-tutorial/raw/41489bc84177a174ab0eb6f788561547d3ac861c/app.js'></script>
<noscript><pre><code>(function() {
  var http, sayHello;
  http = require('http');
  sayHello = function(request, response) {
    var message;
    return message = 'Hello, world!';
  };
}).call(this);
</code></pre></noscript></div>
</p>

<p>You can see here how the indented line following the function
declaration is included in the compiled code’s function body.</p>

<p>More importantly, you can see how all declared variables are preceded
in the compiled code by <code>var</code> declarations in their immediately
enclosing scope, i.e. <code>message</code> is declared within <code>sayHello</code>, rather
than with <code>http</code> and <code>sayHello</code> at the top of the module.</p>

<p>Also notable is that <code>sayHello</code> returns <code>message</code>, despite the fact
that we didn’t explicitly declare a return in the CoffeeScript
version. Another difference between CoffeeScript and JavaScript is
that JavaScript features <em>explicit</em> return semantics—in which
functions don’t return anything unless a <code>return</code> statement is
encountered during execution of the function—while CoffeeScript
features <em>implicit</em> return semantics—in which every function which
completes is expected to return a value. In particular, CoffeeScript
will return the result of the last statement encountered within a
function; in this case the assignment of the string literal
<code>"Hello, world"</code> to the variable <code>message</code>.</p>

<p>Continuing on, we’ll add the rest of <code>sayHello()</code> back in:</p>

<p><div><script src='http://gist-it.appspot.com/github/whittle/node-coffee-heroku-tutorial/raw/d1058e3ad2cb4ebc6328dfd5191122975e3679f9/app.coffee'></script>
<noscript><pre><code>http = require 'http'

sayHello = (request, response) -&gt;
  message = 'Hello, world!'

  response.writeHead 200,
    'Content-Type': 'text/plain; charset=utf-8'
    'Content-Length': Buffer.byteLength message, 'utf8'
  response.end message, 'utf8'
#
# var app = http.createServer(sayHello);
# app.listen(3080);
</code></pre></noscript></div>
</p>

<p>The only surprises here are further characters we can dispense
with. Object literals in CoffeeScript:</p>

<ol>
<li><p>Don’t require enclosing braces, as long as they’re indented
properly.</p></li>
<li><p>Don’t require separating commas, as long as each property starts
on a new line.</p></li>
</ol>


<p>Even without the extra salad, objects get compiled back into
picture-perfect JavaScript:</p>

<p><div><script src='http://gist-it.appspot.com/github/whittle/node-coffee-heroku-tutorial/raw/d1058e3ad2cb4ebc6328dfd5191122975e3679f9/app.js'></script>
<noscript><pre><code>(function() {
  var http, sayHello;
  http = require('http');
  sayHello = function(request, response) {
    var message;
    message = 'Hello, world!';
    response.writeHead(200, {
      'Content-Type': 'text/plain; charset=utf-8',
      'Content-Length': Buffer.byteLength(message, 'utf8')
    });
    return response.end(message, 'utf8');
  };
}).call(this);
</code></pre></noscript></div>
</p>

<p>Also note that, again, the last lexical line of the CoffeeScript
function is turned into an explicit return in the JavaScript function.</p>

<p>Let’s add in the last bit of <code>app.coffee</code>:</p>

<p><div><script src='http://gist-it.appspot.com/github/whittle/node-coffee-heroku-tutorial/raw/ef9f10f216173b22845748a33b9c37672eaceb07/app.coffee'></script>
<noscript><pre><code>http = require 'http'

sayHello = (request, response) -&gt;
  message = 'Hello, world!'

  response.writeHead 200,
    'Content-Type': 'text/plain; charset=utf-8'
    'Content-Length': Buffer.byteLength message, 'utf8'
  response.end message, 'utf8'

app = http.createServer sayHello
app.listen 3080
</code></pre></noscript></div>
</p>

<p>There’s nothing really exciting to see here, we’re just removing
<code>var</code>s and parentheses. In CoffeeScript, <code>var</code> isn’t ever a valid
keyword, so don’t ever use it. Parentheses, being optional, are a
little trickier—we can see why if we combine the last two lines:</p>

<pre><code>http.createServer(sayHello).listen 3080
</code></pre>

<p>Here, the first set of parentheses are necessary so that we can chain
<code>listen()</code> off of the result of the call to <code>createServer()</code>, but
parentheses are unnecessary on the call to <code>listen()</code> because there is
nothing chained after the argument to <code>listen()</code>.</p>

<p>The big caveat to remember with parentheses comes into play when there
are no arguments. A function without arguments or parentheses is just
an object and gets passed like one and dereferenced like one. This is
the case, e.g. when we pass <code>sayHello</code> to <code>createServer()</code>. If you
need the result of a function without arguments, use empty parentheses
to indicate that it should be called like a function, not just
dereferenced like an object.</p>

<p>The final compiled JavaScript is just what you might expect:</p>

<p><div><script src='http://gist-it.appspot.com/github/whittle/node-coffee-heroku-tutorial/raw/ef9f10f216173b22845748a33b9c37672eaceb07/app.js'></script>
<noscript><pre><code>(function() {
  var app, http, sayHello;
  http = require('http');
  sayHello = function(request, response) {
    var message;
    message = 'Hello, world!';
    response.writeHead(200, {
      'Content-Type': 'text/plain; charset=utf-8',
      'Content-Length': Buffer.byteLength(message, 'utf8')
    });
    return response.end(message, 'utf8');
  };
  app = http.createServer(sayHello);
  app.listen(3080);
}).call(this);
</code></pre></noscript></div>
</p>

<p>Our transition from JavaScript to CoffeeScript is complete! If you
want to check that the compiled JavaScript works the way it should,
you are welcome to compile again, then run <code>node app.js</code> just like in
previous posts. That’s two steps, though, and we’re trying to
simplify. The simpler thing to do is to combine the steps:
<code>coffee app.coffee</code> runs the file on node without creating a compiled
JavaScript file.</p>

<p>You might also think that this can be combined with the <code>-w</code> flag so
that the <code>coffee</code> command will watch your files and serve the current
version of the app, but on the present version (coffee-script@1.1.2),
it’s not quite that easy. We’ll plan on adding hot reloads later on.</p>

<p>From now on, posts are going to assume that you’re serving the
CoffeeScript files directly using <code>coffee</code>, so there won’t be any
mention of JavaScript files unless they’re of particular interest.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Headers and encodings: being a good web citizen]]></title>
    <link href="http://whittle.github.com/node-coffee-heroku-tutorial/blog/2011/10/19/headers-and-encodings-being-a-good-web-citizen/"/>
    <updated>2011-10-19T16:00:00-04:00</updated>
    <id>http://whittle.github.com/node-coffee-heroku-tutorial/blog/2011/10/19/headers-and-encodings-being-a-good-web-citizen</id>
    <content type="html"><![CDATA[<p>So, in the last post we sent our very first message, but we’re not
quite doing everything we should.</p>

<p><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html">RFC 2616 §14.13</a>,
specifies that our server should be sending a <code>Content-Length</code> header
with the size of the body in octects (8-bit bytes). Fortunately,
Node can figure that out for us:</p>

<p><div><script src='http://gist-it.appspot.com/github/whittle/node-coffee-heroku-tutorial/raw/8811e6c46aa910ad71420591548f1bb4aaa644eb/app.js'></script>
<noscript><pre><code>(function() {
  var http = require('http');

  var say_hello = function(request, response) {
    var message = 'Hello, world!';

    response.setHeader('Content-Type', 'text/plain; charset=utf-8');
    response.setHeader('Content-Length', Buffer.byteLength(message, 'utf8'));
    response.write(message, 'utf8');
    response.end();
  };

  var app = http.createServer(say_hello);
  app.listen(3080);
})();
</code></pre></noscript></div>
</p>

<p>Here, we used
<a href="http://nodejs.org/docs/v0.4.8/api/buffers.html#buffer.byteLength"><code>Buffer.byteLength()</code></a>
to measure the number of bytes that are going to be sent. We also made
it explicit that we wanted to do all of this in
<a href="http://en.wikipedia.org/wiki/UTF-8">UTF-8</a>, although both <code>write()</code>
and <code>byteLength()</code> will default to UTF-8 if we specify nothing.</p>

<p>Because all of the characters in our <code>message</code> are in the ASCII
set—and can therefore be represented as single bytes in UTF-8—the
result of <code>byteLength()</code> in this case is the same as the result would
be for <code>message.length()</code>: 13. We can even prove this by including a
non-standard HTTP header:</p>

<p><div><script src='http://gist-it.appspot.com/github/whittle/node-coffee-heroku-tutorial/raw/4344892c97c1f4cea0a04e188ba71baf5916b631/app.js'></script>
<noscript><pre><code>(function() {
  var http = require('http');

  var say_hello = function(request, response) {
    var message = 'Hello, world!';

    response.setHeader('Content-Type', 'text/plain; charset=utf-8');
    response.setHeader('Content-Length', Buffer.byteLength(message, 'utf8'));
    response.setHeader('X-Content-Character-Count', message.length);
    response.write(message, 'utf8');
    response.end();
  };

  var app = http.createServer(say_hello);
  app.listen(3080);
})();
</code></pre></noscript></div>
</p>

<p>However, if we include anything besides the first 128 characters of the Unicode
character set, <code>message.length()</code> will no longer give us the correct
result:</p>

<p><div><script src='https://gist.github.com/1299915.js?file=app.js'></script>
<noscript><pre><code>(function() {
  var http = require('http');

  var say_hello = function(request, response) {
    var message = 'مرحبا العالم';

    response.setHeader('Content-Type', 'text/plain; charset=utf-8');
    response.setHeader('Content-Length', Buffer.byteLength(message, 'utf8'));
    response.setHeader('X-Content-Character-Count', message.length);
    response.write(message, 'utf8');
    response.end();
  };

  var app = http.createServer(say_hello);
  app.listen(3080);
})();
</code></pre></noscript></div>
</p>

<p>Here, the usual English message has been switched with its
<a href="http://www.howtosayin.com/say/arabic/hello+world.html">Arabic equivalent</a>,
which has 12 characters that occupy 23 bytes on the wire, and the
headers bear that out:</p>

<pre><code>HTTP/1.1 200 OK
Content-Type: text/plain; charset=utf-8
Content-Length: 23
X-Content-Character-Count: 12
Connection: keep-alive
</code></pre>

<p>Something important to note is the order that we’re calling methods on the
<a href="http://nodejs.org/docs/v0.4.12/api/http.html#http.ServerResponse"><code>http.ServerResponse</code></a>.
It is critical that all the headers have been set on the response
before ever calling
<a href="http://nodejs.org/docs/v0.4.12/api/http.html#response.write"><code>write()</code></a>,
because <code>write()</code> flushes the headers. Similarly,
<a href="http://nodejs.org/docs/v0.4.12/api/http.html#response.end"><code>end()</code></a>
signals that the headers and body are complete as is.</p>

<p>Constructing the response out-of-order is instructive, in that it
produces a number of distinct failure modes:</p>

<ul>
<li><p>Placing a <code>setHeader()</code> after a <code>write()</code> produces an exception with
the message “Can't set headers after they are sent.” If the
exception is uncaught, it will crash the server.</p></li>
<li><p>Placing a <code>write()</code> after the <code>end()</code> causes that <code>write()</code> to never
get sent to the client.</p>

<ul>
<li>If the content-length header is too long for the actual content
sent (i.e., the <code>write()</code>s prior to the <code>end()</code>), the client will
stall as it waits for the server to send the missing bytes.</li>
</ul>
</li>
</ul>


<p>As we wrap things up, let’s shorten our code a little bit.
<a href="http://www.codinghorror.com/blog/2007/05/the-best-code-is-no-code-at-all.html">Much</a>
has
<a href="http://dev.af83.com/code-liability-not-asset-part-1-3/2010/02/24">been</a>
<a href="http://www.infoq.com/news/2011/05/less-code-is-better">said</a> about
keeping your code small, so I won’t harp on it:</p>

<p><div><script src='http://gist-it.appspot.com/github/whittle/node-coffee-heroku-tutorial/raw/5a37ea31b0846e8ce72d853db43d2a38babb04e3/app.js'></script>
<noscript><pre><code>(function() {
  var http = require('http');

  var sayHello = function(request, response) {
    var message = 'Hello, world!';

    response.writeHead(200, {
      'Content-Type': 'text/plain; charset=utf-8',
      'Content-Length': Buffer.byteLength(message, 'utf8')});
    response.end(message, 'utf8');
  };

  var app = http.createServer(sayHello);
  app.listen(3080);
})();
</code></pre></noscript></div>
</p>

<p>What we’ve done here (besides going back to English and removing the
non-standard character-count header) is to pack our remaining headers
into an object and pass them all together to
<a href="http://nodejs.org/docs/v0.4.12/api/http.html#response.writeHead"><code>ServerResponse.writeHead()</code></a>.
<code>writeHead()</code> also requires an
<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">HTTP status code</a>
which should always be <code>200 OK</code> for now.</p>

<p>Additionally, the documentation for
<a href="http://nodejs.org/docs/v0.4.12/api/http.html#response.end"><code>end()</code></a>
specifies that as well as finalizing our response, we can also use it
as a last (and in this case only) <code>write()</code>.</p>

<p>All told, this only saves us two method calls, but if every time you
refactor it nets huge gains, maybe you don’t do it enough.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello world: a first node app]]></title>
    <link href="http://whittle.github.com/node-coffee-heroku-tutorial/blog/2011/10/18/hello-world-a-first-node-app/"/>
    <updated>2011-10-18T15:02:00-04:00</updated>
    <id>http://whittle.github.com/node-coffee-heroku-tutorial/blog/2011/10/18/hello-world-a-first-node-app</id>
    <content type="html"><![CDATA[<p>As is traditional, we’re going to get started with a hello world app,
and we’re going to take it step-by-step.</p>

<p>First, we create a no-op node app. (No-op, noop, and nop are short for
no operation, which is an assembly-ish way of saying that this app
doesn’t do anything.) The initial version of that file is:</p>

<p><div><script src='http://gist-it.appspot.com/github/whittle/node-coffee-heroku-tutorial/raw/db26a14ea44241edccb3f46e08e2a2a7a39600e9/app.js'></script>
<noscript><pre><code>(function() {
})();
</code></pre></noscript></div>
</p>

<p>What you see here is a common construction for executing code without
adding its constituent pieces to the global environment.</p>

<p>Once we have that local scope create, we can start adding things to it:</p>

<p><div><script src='http://gist-it.appspot.com/github/whittle/node-coffee-heroku-tutorial/raw/453f1645b44c652811d13c0b1a196a1c7b72f7a6/app.js'></script>
<noscript><pre><code>(function() {
  var http = require('http');
})();
</code></pre></noscript></div>
</p>

<p>The <code>require()</code> function we’re using here is
<a href="http://nodejs.org/docs/v0.4.12/api/all.html#require">built into Node.js</a>,
although it isn’t a Node.js-specific invention. The <code>require()</code>
function is authoritatively described by
<a href="http://www.commonjs.org/">CommonJS’s</a> <a href="http://www.commonjs.org/specs/modules/1.0/">Modules
spec</a>, but the kernel of
it is: it takes a module identifier (e.g. <code>'http'</code>) and returns
everything the named module has exported (in this case, an object that
we’re storing into the <code>http</code> variable).</p>

<p>The reason we need the <code>http</code> module is so that we can do this:</p>

<p><div><script src='http://gist-it.appspot.com/github/whittle/node-coffee-heroku-tutorial/raw/013450c96caabba3abeafdbccd75ec9b85ea91eb/app.js'></script>
<noscript><pre><code>(function() {
  var http = require('http');

  var app = http.createServer();
})();
</code></pre></noscript></div>
</p>

<p>The object exported by the
<a href="http://nodejs.org/docs/v0.4.12/api/all.html#hTTP"><code>http</code> module</a>
has a method called <code>createServer</code>, which creates an
<a href="http://nodejs.org/docs/v0.4.12/api/all.html#http.Server"><code>http.Server</code></a>,
of all things. We’re going to cleverly call the server that we just
summoned into existence <code>app</code>, despite this not being much of an app
yet.</p>

<p>All of the source we’ve looked at so far has been executable. If
you’ve been following along and typing it into your favorite text
editor, good job! I like the cut of your jib. If you haven’t, go ahead
and do it now. I’m going to assume that you’re using a file named
<code>app.js</code> for right now, just like I am.</p>

<p>Also, if you haven’t already installed Node, there are
<a href="https://github.com/joyent/node/wiki/Installation">plenty of ways to do it</a>,
although if you’re on a Mac, I would suggest
<a href="https://github.com/mxcl/homebrew">Homebrew</a>.</p>

<p>Once you have Node installed on your machine, you can start your app
from the directory you’re working in at any time by running <code>node
app.js</code>. When you try it with any of the previous files we’ve written
so far, however, nothing seems to happen. Node barely stops to think
before it returns you back to the console again. Where’s the server we
created?</p>

<p>The answer is that we created a server, but we didn’t tell it to do
anything; not even that we wanted it to accept connections. Let’s try
telling it just that:</p>

<p><div><script src='http://gist-it.appspot.com/github/whittle/node-coffee-heroku-tutorial/raw/55e7733b635d0fd04addfd6ad292f5f12043c6b9/app.js'></script>
<noscript><pre><code>(function() {
  var http = require('http');

  var app = http.createServer();
  app.listen(3080);
})();
</code></pre></noscript></div>
</p>

<p>Here we’ve instructed the server we created to listen on port 3080 of
the machine that server is being run on. If you run <code>node app.js</code> now,
you’ll notice that instead of very quickly completing, now it seems to
do nothing but very slowly. In fact, it never returns at all, just
sitting there until you kill it (control-C in most Unix shells,
including the default shell on Macs).</p>

<p>The other thing you might notice about your new server is that, while
it’s running, your browser can try to connect to the sever at
<a href="http://localhost:3080">http://localhost:3080</a> but it also never
returns anything. So what we’ve created is exactly what it seems to
be: a server that listens, but never says anything back. Let’s dig
into that.</p>

<p>If you look at the
<a href="http://nodejs.org/docs/v0.4.12/api/all.html#http.createServer">API for the <code>http.createServer()</code></a>
call we’re making, you’ll see that we can pass it a <code>requestListener</code>,
which is “a function which is automatically added to the 'request'
event.” That sounds just like what we’re looking for:</p>

<p><div><script src='http://gist-it.appspot.com/github/whittle/node-coffee-heroku-tutorial/raw/dc8ad3b70bc79cd3b046f3aac7530907fbe661c1/app.js'></script>
<noscript><pre><code>(function() {
  var http = require('http');

  var say_nothing = function() {};

  var app = http.createServer(say_nothing);
  app.listen(3080);
})();
</code></pre></noscript></div>
</p>

<p>If you run this version of app.js, you’ll find that the behavior of
our server hasn’t changed at all: it still never returns
anything. Digging into the Node API again, we see that the signature
of <code>http.Server</code>’s <code>request</code> event (which you’ll recall is the event
to which <code>createServer</code> attaches the function you give it) is
<code>function (request, response) { }</code>.</p>

<p>A little more digging in
<a href="http://nodejs.org/docs/v0.4.12/api/all.html#http.ServerResponse"><code>http.ServerResponse</code></a>
nets us this gem: “The method, <code>response.end()</code>, MUST be called on
each response.” Let’s put this to work for us by changing
<code>say_nothing()</code>’s parameters to match <code>http.Server</code>’s <code>request</code> event
and calling <code>end()</code> on the <code>ServerResponse</code> we just exposed:</p>

<p><div><script src='http://gist-it.appspot.com/github/whittle/node-coffee-heroku-tutorial/raw/cc5158d5dbede2d368a043dbb5fd7616d7206cfd/app.js'></script>
<noscript><pre><code>(function() {
  var http = require('http');

  var say_nothing = function(request, response) {
    response.end();
  };

  var app = http.createServer(say_nothing);
  app.listen(3080);
})();
</code></pre></noscript></div>
</p>

<p>Once you have this app running, you can finally connect to it with
your web browser at
<a href="http://localhost:3080">http://localhost:3080</a>. The server returns a
blank page, but at least it doesn’t just spin forever.</p>

<p>What can we do from here? Anything we want, really: we now have a
working web server. But, as I mentioned in the beginning, I’m a
traditionalist and so we’re going to continue in the direction of
“Hello, world!”</p>

<p>The HTTP server that Node provides us with is intentionally low-level
and depends on us to fill in all of the details. Later on, we’ll find
ways to encapsulate this low-level behavior in a declarative,
functional matter, but for right now we’re going to have to do things
like set the response headers ourselves.</p>

<p>When I run this little non-app, the headers I see on the empty
response are:</p>

<pre><code>HTTP/1.1 200 OK
Connection: keep-alive
Transfer-Encoding: chunked
</code></pre>

<p>(You can see the headers too, if you use Chrome’s
<a href="http://code.google.com/chrome/devtools/docs/overview.html">Developer Tools</a>
or <a href="http://getfirebug.com/">Firebug</a> for Firefox.)</p>

<p>The next crucial header we’re going to need to get our hello through
properly is the content type:</p>

<p><div><script src='http://gist-it.appspot.com/github/whittle/node-coffee-heroku-tutorial/raw/93ffcbff2abaa009fa281a02e0e18668d79e8537/app.js'></script>
<noscript><pre><code>(function() {
  var http = require('http');

  var say_nothing = function(request, response) {
    response.setHeader('Content-Type', 'text/plain');
    response.end();
  };

  var app = http.createServer(say_nothing);
  app.listen(3080);
})();
</code></pre></noscript></div>
</p>

<p>According to
<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html">RFC 2616 §14.17</a>,
the Content-Type header “indicates the media type of the entity-body
sent to the recipient,” or in this case just lets the browser know
that we’re sending it plaintext. If you inspect the (still empty)
response that you get from your node server now, you’ll see headers
like:</p>

<pre><code>HTTP/1.1 200 OK
Content-Type: text/plain
Connection: keep-alive
Transfer-Encoding: chunked
</code></pre>

<p>Now that we let the browser know what we’re sending, we’re ready to
send that famous first message:</p>

<p><div><script src='http://gist-it.appspot.com/github/whittle/node-coffee-heroku-tutorial/raw/7bab5c62f53857fbfd6487e77eaaaf906c7c04e0/app.js'></script>
<noscript><pre><code>(function() {
  var http = require('http');

  var say_hello = function(request, response) {
    var message = 'Hello, world!';

    response.setHeader('Content-Type', 'text/plain');
    response.write(message);
    response.end();
  };

  var app = http.createServer(say_hello);
  app.listen(3080);
})();
</code></pre></noscript></div>
</p>

<p>Fire up your node server and <a href="http://localhost:3080">check it out</a>!</p>
]]></content>
  </entry>
  
</feed>
